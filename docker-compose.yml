version: '3'

services:
  zookeeper:
    image: zookeeper:3.4.9
    restart: unless-stopped
    hostname: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - ./volumes/zookeeper/data:/data
      - ./volumes/zookeeper/datalog:/datalog

  kafka:
    image: confluentinc/cp-kafka:4.1.0
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: "LISTENER_INTERNAL://kafka:9092,LISTENER_EXTERNAL://localhost:9092"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./volumes/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:4.1.0
    hostname: schema-registry
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    depends_on:
      - zookeeper
      - kafka

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.4
    hostname: schema-registry-ui
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081/
      PROXY: "true"
    depends_on:
      - schema-registry

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:4.1.0
    hostname: kafka-rest-proxy
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - zookeeper
      - kafka
      - schema-registry

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.3
    hostname: kafka-topics-ui
    ports:
      - "8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    depends_on:
      - kafka-rest-proxy

  kafka-connect:
    image: confluentinc/cp-kafka-connect:4.1.0
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
    depends_on:
      - zookeeper
      - kafka

  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.4
    hostname: kafka-connect-ui
    ports:
      - "8002:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka-connect

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:0.4.0
    environment:
      SERVER_HTTP_PORT: 9000
    restart: unless-stopped
    depends_on:
      - zookeeper

  zoonavigator-web:
    image: elkozmon/zoonavigator-web:0.4.0
    ports:
      - "8003:8000"
    environment:
      API_HOST: "zoonavigator-api"
      API_PORT: 9000
    depends_on:
      - zoonavigator-api
    restart: unless-stopped

  # KSQL is the open source streaming SQL engine for Apache Kafka.
  # It provides an easy-to-use yet powerful interactive SQL
  # interface for stream processing on Kafka, without the need to write code
  # in a programming language such as Java or Python. KSQL is scalable, elastic,
  # fault-tolerant, and real-time. It supports a wide range of streaming operations,
  # including data filtering, transformations, aggregations, joins, windowing, and sessionization.
  # https://docs.confluent.io/current/ksql/docs/
  # ksql-server:
  #   image: confluentinc/cp-ksql-server:5.0.0
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     # Required.
  #     # The list of Kafka brokers to connect to. This is only used for bootstrapping,
  #     # the addresses provided here are used to initially connect to the cluster,
  #     # after which the cluster can dynamically change. Thanks, ZooKeeper!
  #     KSQL_BOOTSTRAP_SERVERS: kafka:9092
  #     # Controls the REST API endpoint for the KSQL server.
  #     KSQL_LISTENERS: http://0.0.0.0:8088
  #     # The Schema Registry URL path to connect KSQL to.
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #   # ksql-server relies upon Kafka and Schema Registry.
  #   # This will instruct docker to wait until those services are up
  #   # before attempting to start ksql-server.
  #   depends_on:
  #     - kafka
  #     - schema-registry
